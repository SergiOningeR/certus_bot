from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from pydantic import ValidationError
from datetime import datetime

from states.user_states import TicketCreation, TicketDeletion
from database.models import TicketCreate
from database.crud import create_ticket, get_user_tickets, delete_ticket
from services.notifications import notify_admins
from keyboards.user_keyboards import (
    get_main_menu_kb,
    get_cancel_kb,
    get_skip_attachment_kb,
    get_tickets_list_kb
)
from utils.logger import logger

user_router = Router()

@user_router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_menu_kb())

@user_router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å")
@user_router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu_kb())

@user_router.message(Command("new_ticket"))
@user_router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def cmd_new_ticket(message: Message, state: FSMContext):
    await state.set_state(TicketCreation.title)
    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=get_cancel_kb())

@user_router.message(TicketCreation.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(TicketCreation.description)
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ:")

@user_router.message(TicketCreation.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(TicketCreation.priority)
    await message.answer("üî¢ –û—Ü–µ–Ω–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å (1-5):")

@user_router.message(TicketCreation.priority)
async def process_priority(message: Message, state: FSMContext):
    try:
        priority = int(message.text)
        if 1 <= priority <= 5:
            await state.update_data(priority=priority)
            await state.set_state(TicketCreation.phone)
            await message.answer("üì± –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        else:
            await message.answer("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@user_router.message(TicketCreation.phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(TicketCreation.attachments)
    await message.answer(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=get_skip_attachment_kb()
    )

@user_router.message(TicketCreation.attachments, F.photo | F.document)
async def process_attachment(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else message.document.file_id
    async with state.update_data() as data:
        data.setdefault("attachments", [])
        data["attachments"].append(file_id)
    await message.answer("‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")

@user_router.message(TicketCreation.attachments, F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_attachments(message: Message, state: FSMContext):
    data = await state.get_data()
    data.setdefault("attachments", [])
    await state.set_state(TicketCreation.confirmation)
    await message.answer(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–í–∞–∂–Ω–æ—Å—Ç—å: {data['priority']}/5\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}",
        reply_markup=ReplyKeyboardRemove()
    )

@user_router.message(TicketCreation.confirmation)
async def confirm_ticket(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        ticket = TicketCreate(
            user_id=message.from_user.id,
            title=data["title"],
            description=data["description"],
            priority=data["priority"],
            phone=data["phone"],
            attachments=data.get("attachments", [])
        )
        ticket_id = await create_ticket(ticket)
        await notify_admins(ticket_id, ticket)
        await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ #{ticket_id} —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=get_main_menu_kb())
        await state.clear()
    except ValidationError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e.errors()[0]['msg']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@user_router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
@user_router.message(Command("my_tickets"))
async def cmd_my_tickets(message: Message):
    try:
        tickets = await get_user_tickets(message.from_user.id)
        if not tickets:
            return await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫", reply_markup=get_main_menu_kb())
        
        response = []
        for ticket in tickets:
            ticket_info = (
                f"üî∏ #{ticket.id}\n"
                f"üìå {ticket.title}\n"
                f"üìÖ {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üî¢ –í–∞–∂–Ω–æ—Å—Ç—å: {ticket.priority}/5\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {ticket.phone}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ticket.description[:50]}...\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {ticket.status.value}"
            )
            response.append(ticket_info)
        
        await message.answer(
            "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n" + "\n\n".join(response),
            reply_markup=get_main_menu_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫", reply_markup=get_main_menu_kb())

@user_router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
async def delete_ticket_handler(message: Message, state: FSMContext):
    await state.set_state(TicketDeletion.ticket_id)
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@user_router.message(TicketDeletion.ticket_id)
async def process_ticket_id(message: Message, state: FSMContext):
    try:
        ticket_id = int(message.text)
        await delete_ticket(ticket_id, message.from_user.id)
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_main_menu_kb())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")