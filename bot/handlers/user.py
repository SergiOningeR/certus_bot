from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ContentType, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from bot.utils import messaging, validators
from bot.database import db_operations
import config
import json

router = Router()

# FSM States
from aiogram.fsm.state import StatesGroup, State

class TicketStates(StatesGroup):
    description = State()
    attachments = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /new.")

@router.message(Command("new"))
async def cmd_new(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(TicketStates.description)
    await message.answer(messaging.ASK_DESCRIPTION)

@router.message(TicketStates.description)
async def process_description(message: Message, state: FSMContext):
    text = message.text
    if not text or not validators.is_text_non_empty(text):
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.")
        return
    await state.update_data(description=text)
    await state.set_state(TicketStates.attachments)
    await message.answer(messaging.ASK_ATTACHMENTS)

@router.message(TicketStates.attachments, content_types=[ContentType.PHOTO, ContentType.DOCUMENT])
async def process_attachments(message: Message, state: FSMContext):
    data = await state.get_data()
    attachments = data.get("attachments", [])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    if message.photo:
        file_id = message.photo[-1].file_id
        attachments.append({"file_id": file_id, "type": "photo"})
    elif message.document:
        file_id = message.document.file_id
        attachments.append({"file_id": file_id, "type": "document"})
    await state.update_data(attachments=attachments)
    await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â—ë —Ñ–∞–π–ª—ã, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏—Ö. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done.")

@router.message(TicketStates.attachments)
async def attachments_fallback(message: Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª.")

@router.message(TicketStates.attachments, Command("done"))
async def done_attachments(message: Message, state: FSMContext):
    data = await state.get_data()
    description = data.get("description")
    attachments = data.get("attachments", [])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
    attachments_json = json.dumps(attachments)
    ticket_id = await db_operations.create_ticket(
        user_id=message.from_user.id,
        user_username=message.from_user.username,
        user_first_name=message.from_user.first_name,
        user_last_name=message.from_user.last_name,
        description=description,
        attachments=attachments_json
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É
    user_name = message.from_user.username or f"{message.from_user.first_name or ''}"
    text = f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{ticket_id}</b>\n" \
           f"–û—Ç: {user_name}\n" \
           f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}"
    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"ticket:{ticket_id}:work"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"ticket:{ticket_id}:cancel"),
        InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"ticket:{ticket_id}:complete")
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.bot.send_message(config.GROUP_ID, text, reply_markup=keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
    for att in attachments:
        if att["type"] == "photo":
            await message.bot.send_photo(config.GROUP_ID, att["file_id"])
        elif att["type"] == "document":
            await message.bot.send_document(config.GROUP_ID, att["file_id"])
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(messaging.CREATE_SUCCESS.format(ticket_id=ticket_id))
    await state.clear()