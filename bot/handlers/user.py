from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.database.db_operations import create_ticket, get_user_tickets, cancel_user_ticket
from bot.utils.validators import validate_phone
from bot.utils.messaging import save_user_image
import os

class TicketState(StatesGroup):
    title = State()
    description = State()
    phone = State()
    priority = State()
    company = State()
    image = State()

async def start_cmd(message: types.Message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîß –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_ticket"))
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –∫–æ–º–ø–∞–Ω–∏–∏ Certus Telecom! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª.",
        reply_markup=markup
    )

async def new_ticket(callback: types.CallbackQuery):
    await TicketState.title.set()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await TicketState.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")

async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await TicketState.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX):")

async def process_phone(message: types.Message, state: FSMContext):
    if not validate_phone(message.text):
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.update_data(phone=message.text)
    await TicketState.next()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ (–æ—Ç 1 –¥–æ 5):")

async def process_priority(message: types.Message, state: FSMContext):
    if message.text not in ["1", "2", "3", "4", "5"]:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
    await state.update_data(priority=int(message.text))
    await TicketState.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")

async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await TicketState.next()
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")

async def process_image(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ticket_id = await create_ticket(data, message.from_user, None)

    if message.content_type == 'photo':
        image_path = f"media/v_{ticket_id}.png"
        await save_user_image(message, message.photo[-1].file_id, image_path)
    else:
        image_path = None

    await message.answer(f"–ó–∞–¥–∞—á–∞ ‚Ññ{ticket_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.")
    await state.finish()

def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands="start")
    dp.register_callback_query_handler(new_ticket, text="new_ticket")
    dp.register_message_handler(process_title, state=TicketState.title)
    dp.register_message_handler(process_description, state=TicketState.description)
    dp.register_message_handler(process_phone, state=TicketState.phone)
    dp.register_message_handler(process_priority, state=TicketState.priority)
    dp.register_message_handler(process_company, state=TicketState.company)
    dp.register_message_handler(process_image, content_types=types.ContentTypes.ANY, state=TicketState.image)
