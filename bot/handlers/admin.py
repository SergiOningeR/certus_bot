from aiogram import Router
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from bot.database import db_operations
import config
import json

router = Router()

# FSM States for admin report
from aiogram.fsm.state import StatesGroup, State
class AdminStates(StatesGroup):
    wait_report = State()

@router.callback_query(lambda c: c.data and c.data.startswith("ticket:"))
async def process_ticket_action(query: CallbackQuery, state: FSMContext):
    data = query.data.split(":")
    if len(data) != 3:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return
    _, ticket_id_str, action = data
    ticket_id = int(ticket_id_str)
    user = query.from_user
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id not in config.ADMINS:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    if action == "work":
        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ —Ä–∞–±–æ—Ç–µ"
        await db_operations.update_ticket_status(ticket_id, "–≤ —Ä–∞–±–æ—Ç–µ", user.id)
        await query.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–≤ —Ä–∞–±–æ—Ç–µ'.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ticket = await db_operations.get_ticket(ticket_id)
        if ticket:
            await query.bot.send_message(ticket["user_id"], f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—è–≤–∫–æ–π
        text = query.message.text or ""
        await query.message.edit_text(text + "\n\nüîß –°—Ç–∞—Ç—É—Å: –≤ —Ä–∞–±–æ—Ç–µ")
    elif action == "cancel":
        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω–∞"
        await db_operations.update_ticket_status(ticket_id, "–æ—Ç–º–µ–Ω–µ–Ω–∞", user.id)
        await query.answer("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–æ—Ç–º–µ–Ω–µ–Ω–∞'.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ticket = await db_operations.get_ticket(ticket_id)
        if ticket:
            await query.bot.send_message(ticket["user_id"], f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = query.message.text or ""
        await query.message.edit_text(text + "\n\n‚ùå –°—Ç–∞—Ç—É—Å: –æ—Ç–º–µ–Ω–µ–Ω–∞")
    elif action == "complete":
        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –æ—Ç—á–µ—Ç
        await query.answer("–û–∂–∏–¥–∞–µ–º –æ—Ç—á—ë—Ç.")
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∂–∏–º–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        text = query.message.text or ""
        await query.message.edit_text(text + "\n\nüìù –û–∂–∏–¥–∞–µ—Ç –æ—Ç—á—ë—Ç–∞")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await state.update_data(ticket_id=ticket_id)
        await state.set_state(AdminStates.wait_report)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ª–∏—á–∫–µ
        await query.bot.send_message(user.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á—ë—Ç –ø–æ –∑–∞—è–≤–∫–µ #{ticket_id}. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /done.")
    else:
        await query.answer()

@router.message(AdminStates.wait_report, content_types=[ContentType.TEXT, ContentType.PHOTO, ContentType.DOCUMENT])
async def process_report(message: Message, state: FSMContext):
    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    if not ticket_id:
        return
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç—á—ë—Ç –∏ –≤–ª–æ–∂–µ–Ω–∏—è
    report_text = data.get("report_text", "")
    attachments = data.get("attachments", [])
    if message.text and not message.text.startswith('/'):
        report_text += message.text + "\n"
        await state.update_data(report_text=report_text)
        await message.answer("–¢–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω.")
    if message.photo:
        file_id = message.photo[-1].file_id
        attachments.append({"file_id": file_id, "type": "photo"})
        await state.update_data(attachments=attachments)
        await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    if message.document:
        file_id = message.document.file_id
        attachments.append({"file_id": file_id, "type": "document"})
        await state.update_data(attachments=attachments)
        await message.answer("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")

@router.message(AdminStates.wait_report, Command("done"))
async def report_done(message: Message, state: FSMContext):
    data = await state.get_data()
    ticket_id = data.get("ticket_id")
    report_text = data.get("report_text", "")
    attachments = data.get("attachments", [])
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    attachments_json = json.dumps(attachments)
    await db_operations.add_ticket_report(ticket_id, report_text, attachments_json, message.from_user.id)
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ticket = await db_operations.get_ticket(ticket_id)
    user_id = ticket["user_id"] if ticket else None
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id:
        await message.bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{ticket_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—á—ë—Ç:\n{report_text}")
        for att in attachments:
            if att["type"] == "photo":
                await message.bot.send_photo(user_id, att["file_id"])
            elif att["type"] == "document":
                await message.bot.send_document(user_id, att["file_id"])
    await message.answer("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
